---

- name: Can this be conditional?
  hosts: all
  user: root
  when: do_it
  vars: 
    do_it: false
  # vars_prompt:
  #  - name: "admin_password"    
  #    prompt: "hello"
  # #    private: yes
  # #    confirm: yes
  #    encrypt: "md5_crypt"
  #    salt_size: 8
     # when: true

  # vars:
  #   admin_user: waldo

  # vars_files:
  #   - defaults/main.yml
  #   - vars/config.yml

  pre_tasks: 
    - debug: "msg='Hello! ({{ do_it }})"


    # - user: 
    #     name=missy
    #     password={{ item }}
    #     groups=sudo
    #     append=yes
    #   with_password: vars/user_pw encrypt=sha256_crypt length=6



- name: Can this be conditional?
  hosts: all
  user: root
  when: do_it
  vars: 
    do_it: true


  pre_tasks: 
    - debug: "msg='Second! ({{ do_it }})"

    # - name: Get controller's IP address
    #   shell: echo $SSH_CLIENT | cut -d' ' -f1
    #   register: local_ip
    #     # local_ip: '{{ hostvars }}'
    #     # connection: local

    # - debug: var=local_ip
    # - debug: var=ansible_env.SSH_CLIENT

    # - debug: msg='{{ list }}'
    # - debug: msg='{{ list | split }}'
    # - debug: msg='{{ list | split | unique | join("#") }}'
    # - debug: var=list
    # - debug: var=list2
    # - debug: var=list3


  # roles:
  #   - { role: create_user, user: "{{admin_user}}", password: "{{ lookup('password', 'vars/user_pw encrypt=sha256_crypt length=6') }}" }

    # - secure
    # - debug: var=admin_password
  tasks: 
    # - set_fact:
    #     controller_ip: "{{ ansible_env.SSH_CLIENT | regex_replace('^([^ ]*).*$', '\\1') }}"
    # - set_fact: 
    #     user: iop
    # - debug: var=controller_ip
    # - debug: var=ansible_env.SSH_CLIENT
    # - debug: var=vars
    # - debug: var=hostvars

    # - name: Create the admin user account
    #   user:
    #     name={{ admin_user }}
    #     password={{ admin_password }}
    #     groups=sudo,www-data
    #     append=yes
    #     shell=/bin/bash

    # - name: create the placeholder authorized_keys file
    #   authorized_key: 
    #     user={{ admin_user }}
    #     key='ssh-rsa {{ ansible_ssh_host_key_dsa_public }}'

    # - name: Duplicate root's authorized_keys to the new user
    #   shell: cat ~/.ssh/authorized_keys > /home/{{ admin_user }}/.ssh/authorized_keys

    # - name: Add admin user to sudoers
    #   lineinfile: "dest=/etc/sudoers state=present regexp='^{{ admin_user }}' line='{{ admin_user }} ALL=(ALL) NOPASSWD:ALL' validate='visudo -cf %s'"




# - name: Install everything as the admin user with sudo
#   hosts: test
#   user: '{{ admin_user }}'
#   sudo: yes

#   vars_files:
#     - defaults/main.yml
#     - vars/config.yml

# #  TODO: 
# #   * Create a deploy SSH key
# #   * Transfer the SSH key to the server
# #   
# #   https://gist.github.com/RichardBronosky/dc0ced21d6dc7be7d196
# #   http://docs.ansible.com/authorized_key_module.html
# #   http://stackoverflow.com/questions/4565700/specify-private-ssh-key-to-use-when-executing-shell-command-with-or-without-ruby

#   post_tasks: 
#   #   - name: Remove yoâ€™ self from sudoers
#     # - lineinfile: "dest=/etc/sudoers state=absent regexp='^{{ admin_user }} ALL=\\(ALL\\) NOPASSWD:ALL$' validate='visudo -cf %s'"

#   pre_tasks:
#     # - name: Create the user
#       # user: name 

#     # - debug: var={{ environment }}
#     #   remote_user: root
#   roles:
#     # - ftp

#   tasks: 
#     # # - apt: name=git state=installed

#     # - command: mktemp ~/.ansible/tmp/key-XXXXX
#     #   register: private_key

#     # - debug: var=private_key

#     # - name: copy the private key
#     #   copy: src=/Users/joe/.ssh/id_rsa_deploy dest={{ private_key.stdout }}

#     # - set_fact: 
#     #     key_file: /Users/joe/.ssh/id_rsa_deploy
    
#     # - debug: var=key_file
#     # - debug: var=key_file | bool
#     # - debug: var={{key_file != false}}
#     # - debug: var=not not key_file

#     # # - name: write temp config file
#     # #   template: src=test-config.j2 dest=/tmp/test-config

#     # # - debug: var=private_key.stdout

#     # # - name: clone private repo
#     # #   git: 
#     # #     repo: git@github.com:ideasonpurpose/iop-extranets.git
#     # #     # key_file: '{{ private_key.stdout }}'
#     # #     # accept_hostkey: yes
#     # #     ssh_opts: '-o IdentityFile={{ private_key.stdout }} -o LogLevel=verbose -o IdentitiesOnly=yes -o StrictHostKeyChecking=no'
#     # #     dest: /tmp/foo123
#     # #   register: foo

#     # # - debug: var=hostvars
#     # # - debug: var=vars
#     # # - debug: var=env
#     # # - debug: var=environment

#     #     # repo=ssh://git@github.com:ideasonpurpose/iop-extranets.git

#     # # If the repo url starts with ssh://, it seems to override any additional ssh options. 
#     # - name: clone private repo
#     #   git: 
#     #     repo=ssh://git@github.com:joemaller/vagrant-dev-box.git
#     #     accept_hostkey=yes
#     #     dest=/tmp/foo123
#     #     key_file={{ private_key.stdout }}
#     #     # ssh_opts: '-o IdentityFile={{ private_key.stdout }} -o LogLevel=verbose -o IdentitiesOnly=yes -o StrictHostKeyChecking=no'


#     # # - name: clone repo
#     # #   git: 
#     # #     repo=https://github.com/joemaller/vagrant-dev-box.git 
#     # #     dest=/tmp/foo1234

#     # #   register: foo

#     # - debug: var=foo